{"version":3,"sources":["stock.js","App.js","serviceWorker.js","index.js"],"names":["Stock","props","state","title","price","stockDate","historicData","date","stockClose","close","data","text","this","getStockDetails","getStockHistoricalData","fetch","then","res","json","result","setState","shortName","regularMarketPreviousClose","fmt","console","log","catch","err","body","error","map","hit","key","href","React","Component","App","response","prices","postStockHistoricalData","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e7106ee.chunk.js","sourcesContent":["import React from 'react'\n\nclass Stock extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: null,\n      price: null,\n      stockDate: this.props.historicData.date,\n      stockClose: this.props.historicData.close,\n      data : {\n        text: 'front end stock',\n        title: 'front end to api '\n      }\n    }\n  }\n\n\n  componentDidMount () {\n    this.getStockDetails();\n    // this.postStockHistoricalData();\n    this.getStockHistoricalData();\n  }\n\n\n\n  getStockDetails () {\n    fetch('https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-profile?symbol=AAPL', {\n      'method': 'GET',\n      'headers': {\n        'x-rapidapi-host': 'apidojo-yahoo-finance-v1.p.rapidapi.com',\n        'x-rapidapi-key': '833717da8emshdb6cce42afdd1e9p1b5b60jsn3566179e8af4'\n      }\n    })\n        .then(res => res.json())\n        .then(\n            (result) => {\n              this.setState({\n                title: result.price.shortName,\n                price: result.price.regularMarketPreviousClose.fmt\n              })\n              console.log(\"test\")\n            }\n        )\n        .catch(err => {\n          console.log(err)\n        })\n  }\n\n  postStockHistoricalData (){\n    console.log(\"in historical data\")\n    fetch(' https://investbuddyapi.herokuapp.com/noauthresource', {\n      'method': 'POST',\n      'Access-Control-Allow-Origin': '*',\n      'headers': {\n        'Content-Type': 'application/json',\n      },\n      body: this.state.data\n    })\n        .then(res => res.json())\n        .then(data => console.log('Success:', data))\n        .catch((error) => {\n          console.error('Error:', error);\n        })\n  }\n\n  getStockHistoricalData (){\n    console.log(\"in historical data\")\n    fetch(' https://investbuddyapi.herokuapp.com/stocks', {\n      'method': 'GET',\n      'headers': {\n      //  'Content-Type': 'application/json',\n      },\n\n    })\n        .then(res => res.json())\n        .then(data => console.log('Success:', data))\n        .catch((error) => {\n          console.error('Error:', error);\n        })\n  }\n\n  render() {\n\n    const {title, price } = this.state;\n    return <di>\n      <h1>{title}</h1>\n      <h3>{price}</h3>\n      <p>sentiment</p>\n      <h2>sell</h2>\n      <ul>\n        {this.props.historicData.map(hit =>\n            <li key={hit.date}>\n              <div> {hit.date}</div>\n              <a href={hit}>{hit.close}</a>\n            </li>\n        )}\n      </ul>\n    </di>\n  }\n}\n\nexport default Stock","import React, {Component} from 'react';\nimport './App.css';\nimport Stock from './stock'\n\nclass App extends Component {\n constructor(props){\n   super(props);\n\n   this.state = {\n       data : {\n           text: 'front end stock',\n           title: 'front end to api '\n       },\n     historicData: [],\n   }\n }\n\n componentDidMount() {\n     fetch('https://apidojo-yahoo-finance-v1.p.rapidapi.com/stock/v2/get-historical-data?frequency=1d&filter=history&period1=1546448400&period2=1562086800&symbol=AAPL', {\n       'method': 'GET',\n       'headers': {\n         'x-rapidapi-host': 'apidojo-yahoo-finance-v1.p.rapidapi.com',\n         'x-rapidapi-key': '833717da8emshdb6cce42afdd1e9p1b5b60jsn3566179e8af4'\n       }\n     })\n         .then(response => response.json())\n         .then(data => this.setState({\n               historicData: data.prices,\n             }))\n         .catch(err => {\n           console.log(err)\n         })\n    this.postStockHistoricalData()\n }\n\n    postStockHistoricalData (){\n        console.log(\"in historical data\")\n        fetch(' https://investbuddyapi.herokuapp.com/noauthresource', {\n            'method': 'POST',\n            'Access-Control-Allow-Origin': '*',\n            'headers': {\n                'Content-Type': 'application/json',\n            },\n            body: this.state.data\n        })\n            .then(res => res.json())\n            .then(data => console.log('Success:', data))\n            .catch((error) => {\n                console.error('Error:', error);\n            })\n    }\n\n\n  render() {\n\n   const {historicData} = this.state;\n   console.log(historicData);\n\n   return (\n\n       <div className=\"App\">\n         <header className=\"App-header\">\n           <p>\n             Invest Buddy\n           </p>\n\n         </header>\n         <body>\n         <Stock historicData={historicData}>\n         </Stock>\n         </body>\n       </div>\n   );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}